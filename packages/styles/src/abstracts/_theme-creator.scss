@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';

$light-text: #fff;
$dark-text: rgb(0 0 0 / 87%);

@function get-contrast-text($n, $dark: $dark-text, $light: $light-text) {
	@return $light;

	$color-brightness: math.round((color.red($n) * 299) + (color.green($n) * 587) + (color.blue($n) * 114) / 1000);
	$light-color: math.round((color.red(#fff) * 299) + (color.green(#fff) * 587) + (color.blue(#fff) * 114) / 1000);

	@if abs($color-brightness) < ($light-color / 2) {
		@return $light;
	} @else {
		@return $dark;
	}
}

@function augment-color($color) {
	@return (
		main: $color,
		light: color.mix(#fff, $color, 10%),
		lighter: color.mix(#fff, $color, 90%),
		dark: darken($color, 20),
		darker: color.mix(#000, $color, 90%)
	);
}

$base-palette: (
	primary: white,
	accent: white,
	secondary: white,
	disabled: grey,
	error: red,
	info: lightblue,
	success: green,
	warning: orange,
);

@function generate-vars($palette: (), $prefix: '--yt') {
	$result-vars: ();

	@each $name, $value in $palette {
		@if type-of($value) == map {
			$result-vars: map.merge($result-vars, generate-vars($value, $prefix + '-' + $name));
		} @else {
			$result-vars: map.merge(
				$result-vars,
				(
					'#{$prefix}-#{$name}': $value,
				)
			);
		}
	}
	@return $result-vars;
}

@function create-theme($palette: ()) {
	$palette: map.merge($base-palette, $palette);
	$primary: map.get($palette, primary);
	$accent: map.get($palette, accent);
	$secondary: map.get($palette, secondary);
	$disabled: map.get($palette, disabled);
	$error: map.get($palette, error);
	$info: map.get($palette, info);
	$success: map.get($palette, success);
	$warning: map.get($palette, warning);
	$output-theme: (
		'color-primary': augment-color($primary),
		'primary-text-contrast': get-contrast-text($primary),
		'color-secondary': augment-color($secondary),
		'secondary-text-contrast': get-contrast-text($secondary),
		'color-accent': augment-color($accent),
		'accent-text-contrast': get-contrast-text($accent),
		'color-error': augment-color($error),
		'error-text-contrast': get-contrast-text($error),
		'color-info': augment-color($info),
		'info-text-contrast': get-contrast-text($info),
		'color-success': augment-color($success),
		'success-text-contrast': get-contrast-text($success),
		'color-warning': augment-color($warning),
		'action': (
			'active': rgba(0, 0, 0, 0.54),
			'hover': rgba(0, 0, 0, 0.04),
			'hover-opacity': 0.04,
			'selected': rgba(0, 0, 0, 0.08),
			'selected-opacity': 0.08,
			'disabled': rgba(0, 0, 0, 0.38),
			'disabled-bg': rgba(0, 0, 0, 0.12),
			'disabled-opacity': 0.38,
			'focus': rgba(0, 0, 0, 0.1),
			'focus-opacity': 0.12,
			'activated-opacity': 0.12,
		),
		'warning-text-contrast': get-contrast-text($warning),
		// TODO generate these values with different elevation
		'elevation-0':
			(
				shadow: none,
				bg-color: white,
			),
		'elevation-1': (
			shadow:
				string.unquote(
					'rgb(0 0 0 / 20%) 0 3px 1px -2px, rgb(0 0 0 / 14%) 0 2px 2px 0px, rgb(0 0 0 / 12%) 0 1px 5px 0'
				),
			bg-color: white,
		),
		'elevation-2': (
			shadow:
				string.unquote(
					'rgb(0 0 0 / 20%) 0px 2px 4px -1px, rgb(0 0 0 / 14%) 0px 4px 5px 0px, rgb(0 0 0 / 12%) 0px 1px 10px 0px'
				),
			bg-color: white,
		),
		'elevation-3': (
			shadow:
				string.unquote(
					'rgb(0 0 0 / 20%) 0px 3px 3px -2px, rgb(0 0 0 / 14%) 0px 3px 4px 0px, rgb(0 0 0 / 12%) 0px 1px 8px 0px;'
				),
			bg-color: white,
		),
		'elevation-4': (
			shadow:
				string.unquote(
					'rgb(0 0 0 / 20%) 0px 2px 4px -1px, rgb(0 0 0 / 14%) 0px 4px 5px 0px, rgb(0 0 0 / 12%) 0px 1px 10px 0px;'
				),
			bg-color: white,
		),
		'elevation-6': (
			shadow:
				string.unquote(
					'rgb(0 0 0 / 20%) 0px 3px 5px -1px, rgb(0 0 0 / 14%) 0px 6px 10px 0px, rgb(0 0 0 / 12%) 0px 1px 18px 0px;'
				),
			bg-color: white,
		),
	);

	@return generate-vars($output-theme);
}

@mixin apply-theme-vars($vars: ()) {
	@each $name, $value in $vars {
		#{$name}: $value;
	}
}

@mixin create-and-apply-theme($vars: (), $type: light) {
	$resolved-vars: create-theme($vars);
	@include apply-theme-vars($resolved-vars);
}
