@use 'sass:map';

@import '../utils/mixins';

$button-border-radius: 0.2rem !default;
$button-transition: all 0.1s ease-in-out 0s !default;

@mixin raised-color-state($color-state) {
	&.yt-button--color--#{$color-state} {
		background-color: var(--ph-color-#{$color-state}-main);
		color: var(--ph-#{$color-state}-text-contrast);

		--ph-ripple-color: var(--ph-color-#{$color-state}-lighter);

		&:hover,
		&:focus-visible {
			&:not([disabled]),
			&:not([aria-disabled='true']) {
				background-color: var(--ph-color-#{$color-state}-light);
			}
		}
	}
}

@mixin outlined-color-state($color-state) {
	&.ph-button--color--#{$color-state} {
		border-color: var(--ph-color-#{$color-state}-main);
		color: var(--ph-color-#{$color-state}-main);

		--ph-ripple-color: var(--ph-color-#{$color-state}-main);

		&:hover,
		&:focus-visible {
			&:not([disabled]),
			&:not([aria-disabled='true']) {
				background-color: var(--ph-color-#{$color-state}-lighter);
			}
		}
	}
}

@mixin text-color-state($color-state) {
	&.ph-button--color--#{$color-state} {
		color: var(--ph-color-#{$color-state}-main);

		--ph-ripple-color: var(--ph-color-#{$color-state}-main);

		&:hover,
		&:focus-visible {
			&:not([disabled]),
			&:not([aria-disabled='true']) {
				background-color: var(--ph-color-#{$color-state}-lighter);
				color: var(--ph-color-#{$color-state}-light);
			}
		}
	}
}

@mixin embed-color-states($type: 'raised') {
	$color-states: (success, error, warning, info);

	@each $state in $color-states {
		@if $type == 'raised' {
			@include raised-color-state($state);
		} @else if $type == 'outlined' {
			@include outlined-color-state($state);
		} @else if $type == 'text' {
			@include text-color-state($state);
		}
	}
}

.ph-button {
	display: inline-flex;
	position: relative;
	box-sizing: border-box;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding: 0.5rem 0.75rem;
	overflow: hidden;
	transition: $button-transition;
	border: none;
	border-radius: $button-border-radius;
	outline: none;
	background: transparent;
	font-size: 14px;
	line-height: inherit;
	text-align: center;
	text-decoration: none;
	text-transform: uppercase;
	vertical-align: middle;
	cursor: pointer;
	user-select: none;
	appearance: none;

	&[disabled],
	&[aria-disabled='true'] {
		box-shadow: none;
		pointer-events: none;
	}

	&--variant {
		&--raised {
			// TODO get the variables right, make default ones for non supported
			background-color: var(--ph-color-primary-main);
			box-shadow: var(--ph-elevation-1-shadow);
			color: var(--ph-primary-text-contrast);

			--ph-ripple-color: var(--ph-color-primary-lighter);

			&:hover,
			&:focus-visible {
				background-color: var(--ph-color-primary-light);
				box-shadow: var(--ph-elevation-2-shadow);
			}

			@include embed-color-states(raised);

			&[disabled] {
				border-color: var(--ph-action-disabled);
				background-color: var(--ph-action-disabled-bg);
				color: var(--ph-action-disabled);
			}
		}

		&--outlined {
			border: 1px solid var(--ph-color-primary-main);
			color: var(--ph-color-primary);

			--ph-ripple-color: var(--ph-color-primary-main);

			&:hover,
			&:focus-visible {
				background-color: var(--ph-color-primary-lighter);
			}

			@include embed-color-states(outlined);

			&[disabled] {
				border-color: var(--ph-action-disabled);
				color: var(--ph-action-disabled);
			}
		}

		&--text {
			border: none;
			background-color: transparent;
			color: var(--ph-color-primary-main);

			--ph-ripple-color: var(--ph-color-primary-main);

			&:hover,
			&:focus-visible {
				background-color: var(--ph-color-primary-lighter);
				color: var(--ph-color-primary-light);
			}

			@include embed-color-states(text);

			&[disabled] {
				color: var(--ph-action-disabled);
			}
		}
	}

	&--size {
		&--small {
			padding: 0.25rem 0.5rem;
			border-radius: $button-border-radius / 1.5;
			font-size: 12px;
		}

		&--large {
			padding: 0.75rem 1.25rem;
			border-radius: $button-border-radius * 1.5;
			font-size: 16px;
		}
	}

	&--shape {
		&--round {
			border-radius: 50%;
		}
	}

	&:focus-visible {
		@include focus;
	}
}
